Status: wip

Reference:
  kubernetes.github.io/ignress-nginx/deploy/


$ mkdir auth 
$ cd auth
$ npm init -y
$ npm install typescript ts-node-dev express @types/express 
$ tsc --init 
$ mkdir src 
$ touch index.ts 
$ npm start

Adding Skaffold 
----------------

$ touch skaffold.yaml

$ skaffold dev 


Enable ingress to set up local url http://ticketing.dev

kubernetes.github.io/ingress-nginx/deploy

  $ minikube addons enable ingress

  $ minikube addons list 

  Add the line to /etc/hosts 

    sudo vi /etc/hosts

    127.0.0.1 ticketing.dev 

    or for minikube ip

    192.168.49.2  ticketing.dev 


    curl ticketing.dev/api/users/currentuser 

    type 'thisisunsafe' on the web page (of chrome browser) 


Search npm.io and install
-------------------------

  $ npm install express-validator

  See expressjs.com/en/guide/error-handling.html 


For async error handling 
------------------------

  $ npm install express-async-errors --save

 
 
Section 8: database management and modeling 
-------------------------------------------

$ npm install mongoose 
$ npm install @types/mongoose 

Section 9: Authenticaton Strategies and Options 

$ npm install cookie-session @types/cookie-session 
$ npm install jsonwebtoken @types/jsonwebtoken

$ kubectl create secret generic jwt-secret --from-literal=JWT_KEY=asdf
$ kubectl get secrets
 
Setcion 10: Testing isolated microservices

$ npm install --save-dev @types/jest @types/supertest jest ts-jest supertest mongodb-memory-server


use in-memory copy of MongoDB 
use supertest library to make fake requests to our express app 

---------------------------------------------------------------------- 

Section 11: Integrating a Server-side-rendered React app

$ mkdir client && cd client 
$ npm init -y 
$ npm install react react-dom next 

client$ docker build -t renegmedal/client . 

client$ docker push renegmedal/client 

ticketing.dev/banana --> client/pages/banana.js


$ npm install bootstrap

Reference: github.com/zeit/next.js/blob/master/errors/css-global.md 

https://ticketing.dev/auth/signup

client$ npm install axios


$ kubectl expose deployment ingress-nginx-controller --target-port=80 --type=NodePort -n kube-system
$ kubectl get services -n kube-system 
NAME                                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                                     AGE
ingress-nginx-controller             NodePort    10.99.175.29    <none>        80:31714/TCP,443:32282/TCP,8443:32560/TCP   4s
 
----------------------------------------------------------------------

npm run dev

----------------------------------------------------------------------

Mongo:

> db.users.find();
> db.users.remove({});


--------------------------------------------------------

Section 12: Code Sharing and Reuse Between Services 
---------------------------------------------------


Publishing NMP Modules
----------------------

$ npm login 

upload codes:

$ npm publish --access public 


Project Setup
-------------

$ tsc --init 

$ npm install typescript del-cli --save-dev 

/common

$ npm install express express-validator cookie-session jsonwebtoken @types/cookie-session @types/express @types/jsonwebtoken
